Development Notes & Requirements

General Infrastructure

Move Morgan to development dependencies
Implement Docker for deployments
Initialize Docker container configuration
Specify Node.js version in package.json
User Model Changes

Use web3Username as the primary key field
Modify function nomenclature to match routes and controller operations
Implement thorough error handling in controllers with request body validation
Added packages: Morgan and Mongoose
Authentication & Security

Structure KILT identity in main form instead of object form
Remove separate KILT update route - single social route handles all data
Use CryptoJS library for response encryption before sending to frontend
Implement proper error handling for encryption/decryption processes
Move JWT functionality to auth.js utility
API Structure

Move development dependencies to appropriate section
Create separate folders for type definitions
Implement caching and rate limiting
Use standardized HTTP status constants (200, 500, etc.)
Define error types consistently (internal, validation, etc.)
Follow repository pattern: repositories → services → controllers
Campaign Management

Remove campaign functionality
Remove "Get All Campaigns" route
Keep clan and campaign as separate entities
Automatically create leaderboard when campaign is created
Store leaderboard ID with campaign
Include userId parameter in join campaign request
Documentation & Validation

Implement Swagger UI for API documentation
Use Zod for validation
Define catch handlers in one standard format
Create structured type definitions
This structured approach ensures clean architecture, proper separation of concerns, standardized error handling, and secure data transmission throughout the application.